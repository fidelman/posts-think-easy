/**
 * Generated by orval v6.19.0 🍺
 * Do not edit manually.
 * ThinkEasy
 * Test Task BE
 * OpenAPI spec version: 1.0
 */
import type {
  CreatePostInput,
  PostResponce,
  PostResponse,
} from "./serverInstanceEndpoints.schemas";
import { faker } from "@faker-js/faker";
import { rest } from "msw";
import { serverInstance } from "./mutator/server-instance";

export const getPosts = () => {
  /**
   * @summary Create a new post
   */
  const postsControllerCreate = (createPostInput: CreatePostInput) => {
    return serverInstance<PostResponce>({
      url: `/posts`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createPostInput,
    });
  };
  /**
   * @summary Get all posts
   */
  const postsControllerGetAllPosts = () => {
    return serverInstance<PostResponse[]>({ url: `/posts`, method: "get" });
  };
  /**
   * @summary Get all posts of a user
   */
  const postsControllerUserPosts = (userId: string) => {
    return serverInstance<PostResponse[]>({
      url: `/posts/user/${userId}`,
      method: "get",
    });
  };
  /**
   * @summary Get a post by its ID
   */
  const postsControllerPost = (postId: string) => {
    return serverInstance<PostResponse>({
      url: `/posts/${postId}`,
      method: "get",
    });
  };
  return {};
};

export const getPostsControllerCreateMock = () => ({
  author: {},
  content: {},
  published: faker.datatype.boolean(),
  title: faker.word.sample(),
});

export const getPostsControllerGetAllPostsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    authorId: faker.word.sample(),
    content: faker.word.sample(),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.word.sample(),
    published: faker.datatype.boolean(),
    title: faker.word.sample(),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getPostsControllerUserPostsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    authorId: faker.word.sample(),
    content: faker.word.sample(),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.word.sample(),
    published: faker.datatype.boolean(),
    title: faker.word.sample(),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  }));

export const getPostsControllerPostMock = () => ({
  authorId: faker.word.sample(),
  content: faker.word.sample(),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.word.sample(),
  published: faker.datatype.boolean(),
  title: faker.word.sample(),
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
});

export const getPostsMSW = () => [
  rest.post("*/posts", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostsControllerCreateMock()),
    );
  }),
  rest.get("*/posts", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostsControllerGetAllPostsMock()),
    );
  }),
  rest.get("*/posts/user/:userId", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostsControllerUserPostsMock()),
    );
  }),
  rest.get("*/posts/:postId", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getPostsControllerPostMock()),
    );
  }),
];
