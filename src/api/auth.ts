/**
 * Generated by orval v6.19.0 🍺
 * Do not edit manually.
 * ThinkEasy
 * Test Task BE
 * OpenAPI spec version: 1.0
 */
import type {
  Auth,
  LoginInput,
  RefreshResponceModel,
  RefreshTokenInput,
  SignupInput,
} from "./serverInstanceEndpoints.schemas";
import { faker } from "@faker-js/faker";
import { rest } from "msw";
import { serverInstance } from "./mutator/server-instance";

export const getAuth = () => {
  /**
   * @summary Signup a new user
   */
  const authControllerSignup = (signupInput: SignupInput) => {
    return serverInstance<Auth>({
      url: `/auth/signup`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: signupInput,
    });
  };
  /**
   * @summary Login an existing user
   */
  const authControllerLogin = (loginInput: LoginInput) => {
    return serverInstance<Auth>({
      url: `/auth/login`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: loginInput,
    });
  };
  /**
   * @summary Refresh access token using a refresh token
   */
  const authControllerRefreshToken = (refreshTokenInput: RefreshTokenInput) => {
    return serverInstance<RefreshResponceModel>({
      url: `/auth/refresh-token`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenInput,
    });
  };
  return {
    authControllerSignup,
    authControllerLogin,
    authControllerRefreshToken,
  };
};
export type AuthControllerSignupResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["authControllerSignup"]>>
>;
export type AuthControllerLoginResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["authControllerLogin"]>>
>;
export type AuthControllerRefreshTokenResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getAuth>["authControllerRefreshToken"]>>
>;

export const getAuthControllerSignupMock = () => ({
  accessToken: faker.word.sample(),
  refreshToken: faker.word.sample(),
});

export const getAuthControllerLoginMock = () => ({
  accessToken: faker.word.sample(),
  refreshToken: faker.word.sample(),
});

export const getAuthControllerRefreshTokenMock = () => ({
  access_token: faker.word.sample(),
});

export const getAuthMSW = () => [
  rest.post("*/auth/signup", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getAuthControllerSignupMock()),
    );
  }),
  rest.post("*/auth/login", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getAuthControllerLoginMock()),
    );
  }),
  rest.post("*/auth/refresh-token", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getAuthControllerRefreshTokenMock()),
    );
  }),
];
